//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pokemon.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Pokebot_PokeBotsearchPokemonCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Pokebot_Pokemon?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Pokebot_Pokemon?>) -> Void) throws
}

internal extension Pokebot_PokeBotsearchPokemonCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Pokebot_Pokemon? { return try self._receive(timeout: timeout) }
}

fileprivate final class Pokebot_PokeBotsearchPokemonCallBase: ClientCallServerStreamingBase<Pokebot_PokeInput, Pokebot_Pokemon>, Pokebot_PokeBotsearchPokemonCall {
  override class var method: String { return "/pokebot.PokeBot/searchPokemon" }
}


/// Instantiate Pokebot_PokeBotServiceClient, then call methods of this protocol to make API calls.
internal protocol Pokebot_PokeBotService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func searchPokemon(_ request: Pokebot_PokeInput, completion: ((CallResult) -> Void)?) throws -> Pokebot_PokeBotsearchPokemonCall

}

internal final class Pokebot_PokeBotServiceClient: ServiceClientBase, Pokebot_PokeBotService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func searchPokemon(_ request: Pokebot_PokeInput, completion: ((CallResult) -> Void)?) throws -> Pokebot_PokeBotsearchPokemonCall {
    return try Pokebot_PokeBotsearchPokemonCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Pokebot_PokeBotProvider {
  func searchPokemon(request: Pokebot_PokeInput, session: Pokebot_PokeBotsearchPokemonSession) throws -> ServerStatus?
}

internal protocol Pokebot_PokeBotsearchPokemonSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Pokebot_Pokemon, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Pokebot_Pokemon, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Pokebot_PokeBotsearchPokemonSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Pokebot_Pokemon, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Pokebot_PokeBotsearchPokemonSessionBase: ServerSessionServerStreamingBase<Pokebot_PokeInput, Pokebot_Pokemon>, Pokebot_PokeBotsearchPokemonSession {}


/// Main server for generated service
internal final class Pokebot_PokeBotServer: ServiceServer {
  private let provider: Pokebot_PokeBotProvider

  internal init(address: String, provider: Pokebot_PokeBotProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Pokebot_PokeBotProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Pokebot_PokeBotProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/pokebot.PokeBot/searchPokemon":
        try Pokebot_PokeBotsearchPokemonSessionBase(
            handler: handler,
            providerBlock: { try provider.searchPokemon(request: $0, session: $1 as! Pokebot_PokeBotsearchPokemonSessionBase) })
            .run(queue: queue)
        
            return true
    default:
        throw CallError.notOnServer //
    }
  }
}

